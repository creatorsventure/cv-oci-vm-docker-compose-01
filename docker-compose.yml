#version: '3.8'
name: cv-base-services

services:
  traefik:
    image: traefik:latest
    container_name: traefik
    # profiles: ["infra"] # docker compose --profile infra config/up etc
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - "${DOCKER_DATA_ROOT}/traefik-data/config:/etc/traefik:rw"
      - "${DOCKER_DATA_ROOT}/traefik-data/config/acme.json:/acme.json"
      - "${DOCKER_DATA_ROOT}/traefik-data/log:/var/log/traefik:rw"
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "80:80"
      - "443:443"
    environment:
      - TZ=${TZ:-UTC}
    healthcheck:
      test: [ "CMD", "traefik", "healthcheck" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - web
    command:
      - "--certificatesresolvers.le.acme.email=${EMAIL}"
    extra_hosts:
      # To manage host network mode container accessiblity
      - "host.docker.internal:host-gateway"
    labels:
      - "traefik.enable=true"
      # Dashboard router (routes to Traefik internal api)
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_HOST}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=le"
      - "traefik.http.routers.traefik.service=api@internal"
      # Attach file-provided middlewares (secure headers + basic auth)
      - "traefik.http.routers.traefik.middlewares=dashboard-auth@file,secure-headers@file,rate-limit@file"

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    # profiles: ["infra"]
    restart: unless-stopped
    depends_on:
      - traefik
    volumes:
      - "${DOCKER_DATA_ROOT}/portainer-data/config:/data:rw"
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`${PORTAINER_HOST}`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.routers.portainer.tls.certresolver=le"
      # Explicit server port inside the container (Portainer default is 9000)
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      # Add middlewares (make sure they exist in dynamic.yml)
      - "traefik.http.routers.portainer.middlewares=secure-headers@file,rate-limit@file"
    networks:
      - web
    healthcheck:
      disable: true

  mariadb:
    image: mariadb:latest
    container_name: mariadb
    restart: unless-stopped
    depends_on:
      - traefik
      - wg-easy
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: fog
      MYSQL_USER: fog
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - ${DOCKER_DATA_ROOT}/mariadb-data/data:/var/lib/mysql:rw
      - ${DOCKER_DATA_ROOT}/mariadb-data/config/maria.cnf:/etc/mysql/conf.d/my.cnf:ro
      - ${DOCKER_DATA_ROOT}/mariadb-data/backups:/backups:rw
      - ${DOCKER_DATA_ROOT}/mariadb-data/initdb:/docker-entrypoint-initdb.d:ro
      - ${DOCKER_DATA_ROOT}/mariadb-data/log:/var/log/mysql
    tmpfs:
      - /var/run
      - /var/lib/mysqltmp
    networks:
      - web
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "127.0.0.1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  wg-easy:
    image: ghcr.io/wg-easy/wg-easy
    container_name: wg-easy
    # profiles: ["vpn"]
    restart: unless-stopped
    network_mode: host # Required for better networking etc.
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
      #sysctls: # Enable if bridge network mode used 
      #- net.ipv4.conf.all.src_valid_mark=1
    environment:
      - WG_HOST=${WG_HOST}
      - PASSWORD_HASH=${WG_ADMIN_PASS}
      - WG_DEFAULT_ADDRESS=10.9.9.x
      - WG_DEFAULT_DNS=1.1.1.1
      # Optional: set WG_PORT if you want a non-default inside container
      # - WG_PORT=51820
    volumes:
      - "${DOCKER_DATA_ROOT}/wgeasy-data/config:/etc/wireguard:rw"
      - "${DOCKER_DATA_ROOT}/wgeasy-data/log:/var/log/wgeasy:rw"
      # expose UDP WireGuard port on host (required)
      #ports: # Enable if bridge network mode used because host mode automatically bind
      #- "51820:51820/udp"
      # do NOT publish 51821: let Traefik serve the UI via HTTPs instead
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.wgeasy.rule=Host(`${WG_HOST}`)"
      - "traefik.http.routers.wgeasy.entrypoints=websecure"
      - "traefik.http.routers.wgeasy.tls=true"
      - "traefik.http.routers.wgeasy.tls.certresolver=le"
      - "traefik.http.services.wgeasy.loadbalancer.server.port=51821"
      - "traefik.http.routers.wgeasy.middlewares=rate-limit@file"
      #networks:
      #- web
    healthcheck:
      # prefer HTTP healthcheck against the UI if present
      disable: true

  plex:
    image: plexinc/pms-docker:latest
    container_name: plex
    network_mode: host # Required for DLNA, Chromecast, discovery, etc.
    restart: unless-stopped
    depends_on:
      - traefik
      - wg-easy
    environment:
      - TZ=${TZ}
      - PLEX_CLAIM=claim-fZeoxKyRqhHG3H6tqzzs # Get from https://plex.tv/claim (valid 4 mins)
      - ADVERTISE_IP=http://10.9.9.1:32400/,http://10.20.20.102:32400/,https://plex.oci.creatorsventure.com:32400/
      - HOSTNAME=plex-server
      - PLEX_UID=${HOST_UID}
      - PLEX_GID=${HOST_GID}
    volumes:
      - ${DOCKER_DATA_ROOT}/plex-data/config:/config
      - ${DOCKER_DATA_ROOT}/plex-data/transcode:/transcode
      - ${MEDIA_DATA_ROOT}/qbit-data/downloads:/data
      #devices: # for gpu passthrew
      #- /dev/dri:/dev/dri
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.plex.rule=Host(`${PLEX_HOST}`)"
      - "traefik.http.routers.plex.entrypoints=websecure"
      - "traefik.http.routers.plex.tls=true"
      - "traefik.http.routers.plex.tls.certresolver=le"
      # proxy to the host's plex port
      - "traefik.http.services.plex.loadbalancer.server.url=http://host.docker.internal:32400"
      - "traefik.http.middlewares.plex-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      # optional: add middlewares (basic auth, secure headers) if you want
      - "traefik.http.routers.plex.middlewares=rate-limit@file"

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    restart: unless-stopped
    environment:
      - PUID=${HOST_UID} # your user id (host)
      - PGID=${HOST_GID} # your group id (host)
      - TZ=${TZ} # set your timezone
      - WEBUI_PORT=8080 # internal webui port
      # - UMASK_SET=022        # optional
      # - QBITTORRENT_WEBUI_PORT=8080  # alternate var name older images
    volumes:
      - ${DOCKER_DATA_ROOT}/qbit-data/config:/config
      - ${MEDIA_DATA_ROOT}/qbit-data/downloads:/downloads
      - ${MEDIA_DATA_ROOT}/qbit-data/incomplete:/incomplete
      - ${MEDIA_DATA_ROOT}/qbit-data/watch:/watch
    # If you use docker's host network + direct port exposure:
    # network_mode: "host"
    ports:
      - "6881:6881" # bittorrent TCP
      - "6881:6881/udp" # bittorrent UDP (DHT/uTP)
    networks:
      - web
    # Traefik v2 labels (if you use Traefik as reverse proxy)
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qbittorrent.rule=Host(`${QBITTORRENT_HOST}`)"
      - "traefik.http.routers.qbittorrent.entrypoints=websecure"
      - "traefik.http.routers.qbittorrent.tls=true"
      - "traefik.http.routers.qbittorrent.tls.certresolver=le"
      - "traefik.http.services.qbittorrent.loadbalancer.server.port=8080"
      - "traefik.http.routers.qbittorrent.middlewares=rate-limit@file"
      # Basic auth (optional) -> create user:pass with `htpasswd -nb user pass` then use the base64
      # - "traefik.http.routers.qbittorrent.middlewares=auth"
      # - "traefik.http.middlewares.auth.basicauth.users=USER:HASHEDPASSWORD"

  filebrowser:
    image: filebrowser/filebrowser:latest
    container_name: filebrowser
    user: "${HOST_UID}:${HOST_GID}" # adjust to your download folder owner
    restart: unless-stopped
    environment:
      - PUID=${HOST_UID}
      - PGID=${HOST_GID}
      - TZ=${TZ}
    volumes:
      - ${DOCKER_DATA_ROOT}/filebrowser-data/config:/config
      - ${DOCKER_DATA_ROOT}/filebrowser-data/database:/database
      - ${FILE_BROWSER_DATA_01}:/srv/data-01 # your mounted media drive path
      - ${FILE_BROWSER_DATA_02}:/srv/data-02
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.filebrowser.rule=Host(`${FILE_BROWSER_HOST}`)"
      - "traefik.http.routers.filebrowser.entrypoints=websecure"
      - "traefik.http.routers.filebrowser.tls=true"
      - "traefik.http.routers.filebrowser.tls.certresolver=le"
      - "traefik.http.services.filebrowser.loadbalancer.server.port=80"
      - "traefik.http.routers.filebrowser.middlewares=rate-limit@file"
    networks:
      - web

networks:
  web:
    driver: bridge
